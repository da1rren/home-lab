@implements IAsyncDisposable
@page "/"
@using Grpc.Net.Client
@using Home.Plant.Watering.Shared
@using Grpc.Core

<PageTitle>Index</PageTitle>

<p>@Hostname</p>
<p>Is Pumping: @IsPumping</p>

@if (IsPumping)
{
    <button class="btn btn-warning" @onclick="() => Stop()">Stop</button>
}
else
{
    <button class="btn btn-success" @onclick="() => Start()">Start</button>
}

@code
{
    private CancellationTokenSource _cancelSource;

    private Task _statusStreamTask;

    private PumpService.PumpServiceClient _client;
    
    public string Hostname { get; set; }
    
    public bool IsPumping { get; set; }

    protected override void OnInitialized()
    {
        var channelBase = GrpcChannel.ForAddress("http://pi-pump:8080");
        _client = new PumpService.PumpServiceClient(channelBase);
    }

    protected override async Task OnInitializedAsync()
    {
        _cancelSource = new CancellationTokenSource();
        _statusStreamTask = StreamStatus(_cancelSource.Token);
    }

    private async Task StreamStatus(CancellationToken cancellationToken)
    {
        var stream = _client.StatusStream(new PumpStatusStreamRequest());
            
        await foreach (var status in stream.ResponseStream.ReadAllAsync(cancellationToken: cancellationToken))
        {
            Hostname = status.Hostname;
            IsPumping = status.IsPumping;
            StateHasChanged();
        }
    }
    
    private async Task Start()
    {
        await _client.StartAsync(new StartPumpRequest());
    }
    
    private async Task Stop()
    {
        await _client.StopAsync(new StopPumpRequest());
    }

    public async ValueTask DisposeAsync()
    {
        _cancelSource.Cancel();
        await _statusStreamTask;
    }
}
